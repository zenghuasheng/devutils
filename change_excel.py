import os
import openpyxl


def process_mapping(worksheet, module_mapping):
    for idx, row in enumerate(worksheet.iter_rows(min_row=2, max_row=worksheet.max_row, values_only=True), start=2):
        basename = os.path.basename(row[0])
        if basename in module_mapping and row[1] is None:
            module_info = module_mapping[basename]
            worksheet.cell(row=idx, column=2, value=module_info[0])
            worksheet.cell(row=idx, column=3, value=module_info[1])


def main():
    module_mapping = {
        # services
        # "account": ("", ""),
        # "accountnotice": ("", ""),
        "activity": ("project-api", "ppm"),
        # "agent": ("", ""),
        # "amqp": ("", ""),
        # "app": ("", ""),
        # "app_platform": ("", ""),
        # "audit_log": ("", ""),
        # "auth": ("", ""),
        # "authconfig": ("", ""),
        # "automation": ("", ""),
        # "batch": ("biz-common", "batch"),
        # "batch_refactor": ("", ""),
        # "bind": ("", ""),
        # "captcha": ("", ""),
        # "cert": ("", ""),
        # "channel": ("", ""),
        # "com": ("", ""),
        # "common": ("", ""),
        "commoncomment": ("biz-common", "comment"),
        "commonmessage": ("biz-common", "message"),
        # "config": ("", ""),
        "container": ("project-api", "container"),
        "context": ("biz-common", "context"),
        # "copilot": ("", ""),
        # "cron": ("", ""),
        # "custom_language": ("", ""),
        # "demo": ("", ""),
        "desk": ("project-api", "desk"),
        # "devops": ("", ""),
        # "encryption": ("", ""),
        "environment": ("biz-common", "environment"),
        # "event": ("", ""),
        # "eventbus": ("", ""),
        "field": ("project-api", "task"),
        "fieldcal": ("project-api", "task"),
        "filter": ("project-api", "project"),
        "ganttchart": ("project-api", "ppm"),
        # "import_rule": ("", ""),
        # "importer": ("", ""),
        # "init.go": ("", ""),
        # "item": ("project-api", "item"),
        "kanban": ("project-api", "project"),
        "layout": ("project-api", "task"),
        # "license": ("", ""),
        # "login_notice": ("", ""),
        "lua": ("biz-common", "lua"),
        # "mail": ("", ""),
        # "manhour": ("", ""),
        # "marketplace": ("", ""),
        # "membership": ("", ""),
        # "menu.v2": ("", ""),
        "message": ("biz-common", "message"),
        # "miniapp": ("", ""),
        # "notice": ("", ""),
        # "noticeconfig": ("", ""),
        # "noticerules": ("", ""),
        # "notify": ("", ""),
        # "oauth": ("", ""),
        # "object": ("", ""),
        "objectlink": ("project-api", "task"),
        "objectlinktype": ("project-api", "task"),
        # "ones_task": ("", ""),
        # "open-platform-services": ("", ""),
        # "operations": ("", ""),
        # "org_initializer": ("", ""),
        # "organization": ("", ""),
        # "performance": ("", ""),
        "permission": ("biz-common", "permission"),
        "permissionrule": ("biz-common", "permission"),
        # "pipeline": ("", ""),
        # "plugin": ("", ""),
        # "plugin-platform": ("", ""),
        # "privacy_policy": ("", ""),
        "product": ("project-api", "project"),
        # "program": ("", ""),
        "publishVersion": ("project-api", "task"),
        # "push": ("", ""),
        # "queue": ("", ""),
        "rank": ("project-api", "project"),
        # "region": ("", ""),
        "related": ("biz-common", "related"),
        "report": ("project-api", "project"),
        "resource": ("biz-common", "resource"),
        "resource_management": ("biz-common", "resource"),
        # "risk_detection": ("", ""),
        # "scm": ("", ""),
        "scope_field": ("project-api", "task"),
        "scope_field_config": ("project-api", "task"),
        # "script_field": ("", ""),
        "search": ("biz-common", "search"),
        # "service": ("", ""),
        # "setting": ("", ""),
        # "sms": ("", ""),
        # "smsconfig": ("", ""),
        # "sso": ("", ""),
        # "sso.v2": ("", ""),
        "stamp": ("biz-common", "stamp"),
        "status": ("project-api", "task"),
        # "stripe": ("", ""),
        # "style.v2": ("", ""),
        "tabconfig": ("project-api", "task"),
        # "team": ("", ""),
        # "teamscm": ("", ""),
        # "template": ("", ""),
        # "testcase": ("", ""),
        # "timezone": ("", ""),
        # "trace": ("", ""),
        # "tz": ("", ""),
        # "tzconfig": ("", ""),
        "user": ("biz-common", "user"),
        "userdomain": ("biz-common", "userdomain"),
        "usergroup": ("biz-common", "user"),
        # "userguide": ("", ""),
        "version": ("project-api", "task"),
        # "webhook": ("", ""),
        "workflow": ("project-api", "task"),
        "workorder": ("project-api", "task"),
        # models
        # "accountnotice": ("", ""),
        # "action": ("", ""),
        # "app_platform": ("", ""),
        # "audit_log": ("", ""),
        # "auth": ("", ""),
        # "authconfig": ("", ""),
        # "authenticatorinfo": ("", ""),
        # "automation": ("", ""),
        # "blog.go": ("", ""),
        # "bot": ("", ""),
        # "captcha": ("", ""),
        # "channel": ("", ""),
        # "common": ("", ""),
        "condition": ("biz-common", "condition"),
        "dashboard": ("project-api", "project"),
        # "db": ("", ""),
        # "department": ("", ""),
        # "es": ("", ""),
        "field_cal": ("project-api", "task"),
        # "geolocation": ("", ""),
        # "i18n": ("", ""),
        # "imap.go": ("", ""),
        # "importerbase": ("", ""),
        # "ip_resolver": ("", ""),
        # "kilob": ("", ""),
        "layout_field": ("project-api", "task"),
        # "mail.go": ("", ""),
        # "migrate_notice": ("", ""),
        "milestone": ("project-api", "ppm"),
        "notification": ("biz-common", "notice"),
        # "observer": ("", ""),
        # "onesapp": ("", ""),
        # "pages": ("", ""),
        "ppmtask": ("project-api", "ppm"),
        # "quickaction": ("", ""),
        # "request_code.go": ("", ""),
        # "reset_code.go": ("", ""),
        # "space": ("", ""),
        # "task_preference.go": ("", ""),
        # "team_scm": ("", ""),
        # "thirdparty": ("", ""),
        # "utils": ("", ""),
        # "whiteAppEmailRecord": ("", ""),
        "workordernotice": ("project-api", "task"),
        # "activity": "ppm",
        # "commoncomment": "task",
        # "container": "project",
        # "dashboard": "project",
        # "deliverable": "ppm",
        # "field": "task",
        # "field_cal": "task",
        # "filter": "project",
        # "ganttchart": "ppm",
        # "issue_type_scope_field_constraint": "task",
        # "kanban": "project",
        # "layout": "task",
        # "layout_field": "task",
        # "milestone": "ppm",
        # "noticeconfig": "task",
        # "noticerules": "task",
        # "objectcount": "task",
        # "objectlink": "task",
        # "objectlinktype": "task",
        # "ppmtask": "ppm",
        # "product": "project",
        # "program": "project",
        # "publishVersion": "task",
        # "rank": "project",
        # "report": "project",
        # "status": "task",
        # "tabconfig": "task",
        # "taskrelation": "task",
        # "template": "task",
        # "workorder": "task",
        # "workordernotice": "task",

        # services/common
        # "app_platform": ("", ""),
        # "auth": ("", ""),
        # "automation": ("", ""),
        "batch": ("", ""),
        "component": ("project-api", "project"),
        # "email": ("", ""),
        "errors": ("biz-common", "errors"),
        "gantt": ("project-api", "ppm"),
        # "get.go": ("", ""),
        "issuetype": ("project-api", "task"),
        "kmutex": ("biz-common", "mutex"),
        # "license_manager": ("", ""),
        # "liststore": ("", ""),
        "noticerule": ("biz-common", "notice"),
        # "notification.go": ("", ""),
        # "observer": ("", ""),
        "organization": ("biz-common", "user"),
        # "sample": ("", ""),
        # "sort.go": ("", ""),
        "sprint": ("project-api", "project"),
        # "statdog": ("", ""),
        "task": ("project-api", "task"),
        # "team.go": ("", ""),
        "template": ("project-api", "task"),
        "template_defaultconfig": ("project-api", "task"),
        # "thirdparty": ("", ""),
        # "utils": ("", ""),
    }
    excel_file_path = '/Users/xhs/task/依赖梳理/目录映射.xlsx'

    try:
        workbook = openpyxl.load_workbook(excel_file_path)
        worksheet = workbook.active

        process_mapping(worksheet, module_mapping)

        workbook.save('/Users/xhs/task/依赖梳理/目录映射_updated.xlsx')
        print("Processing completed successfully.")

    except Exception as e:
        print(f"Error: {e}")


if __name__ == "__main__":
    main()
